{"version":3,"sources":["components/Container/Container.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["Container","children","className","ContactForm","state","name","number","handleInputChange","event","currentTarget","value","setState","handleFormSubmit","preventDefault","props","onSubmit","this","type","required","placeholder","onChange","pattern","Component","Filter","filter","ContactListItem","onClick","ContactList","contacts","map","id","App","addContact","newContact","uuidv4","undefined","find","alert","deleteContact","contactId","filterContactsByName","getFilteredContacts","lowercasedFilter","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","prevContacts","nextContacts","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cde7d333.chunk.js","sourcesContent":["import './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ContactForm.scss';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  handleFormSubmit = event => {\n    const { name, number } = this.state;\n\n    event.preventDefault();\n\n    this.props.onSubmit(name, number);\n\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className=\"form\" onSubmit={this.handleFormSubmit}>\n        <label className=\"form-field\">\n          Name\n          <input\n            className=\"form-input\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            required\n            placeholder=\"John Smith\"\n            onChange={this.handleInputChange}\n          ></input>\n        </label>\n\n        <label className=\"form-field\">\n          Number\n          <input\n            className=\"form-input\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            required\n            placeholder=\"111-11-11\"\n            pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\n            onChange={this.handleInputChange}\n          ></input>\n        </label>\n\n        <button className=\"add-contact-button\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;","import PropTypes from 'prop-types';\n\nimport './Filter.scss';\n\nconst Filter = ({ filter, onChange }) => (\n  <label className=\"filter\">\n    Find contacts by name\n    <input\n      className=\"filter-input\"\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;","import PropTypes from 'prop-types';\n\nimport './ContactListItem.scss';\n\nconst ContactListItem = ({ name, number, onClick }) => (\n  <li className=\"contact-list-item\">\n    <p className=\"contact-name\">{name}:</p>\n    <p className=\"contact-number\">{number}</p>\n    <button className=\"delete-contact-button\" type=\"button\" onClick={onClick}>\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;","import PropTypes from 'prop-types';\nimport ContactListItem from '../ContactListItem';\n\nimport './ContactList.scss';\n\nconst ContactList = ({ contacts, onClick }) => (\n  <ul className=\"contact-list\">\n    {contacts.map(({ name, number, id }) => (\n      <ContactListItem\n        name={name}\n        number={number}\n        key={id}\n        onClick={() => onClick(id)}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ContactList;","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n\n    const parsedContacts = JSON.parse(contacts);\n\n    \n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    \n    const prevContacts = prevState.contacts;\n    const nextContacts = this.state.contacts;\n\n    if (prevContacts !== nextContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  addContact = (name, number) => {\n    const { contacts } = this.state;\n    const newContact = { name, number, id: uuidv4() };\n    const existedContactWithTheSameName = contacts.find(\n      ({ name }) => name === newContact.name,\n    );\n\n    if (existedContactWithTheSameName !== undefined) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n\n    this.setState(({ contacts }) => ({\n      contacts: [...contacts, newContact],\n    }));\n  };\n\n  deleteContact = contactId => {\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter(({ id }) => id !== contactId),\n    }));\n  };\n\n  filterContactsByName = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    const lowercasedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(lowercasedFilter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <Container>\n        <h1 className=\"app-title\">Phonebook</h1>\n\n        <ContactForm onSubmit={this.addContact} />\n\n        <h2 className=\"section-title\">Contacts</h2>\n\n        <Filter filter={filter} onChange={this.filterContactsByName} />\n\n        <ContactList contacts={filteredContacts} onClick={this.deleteContact} />\n      </Container>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);"],"sourceRoot":""}